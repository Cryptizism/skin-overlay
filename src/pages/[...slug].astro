---
import { CollectionEntry, getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import FormattedDate from '../components/FormattedDate.astro';

export async function getStaticPaths() {
	const overlays = await getCollection('overlay');
	return overlays.map((overlay) => ({
		params: { slug: overlay.id },
		props: overlay,
	}));
}
type Props = CollectionEntry<'overlay'>;

const overlay = Astro.props;
---
<Layout title={overlay.data.name} path="..">
	<Navbar search={true} path=".."/>
	<main class="flex max-lg:flex-col w-[80vw] mx-auto">
		<div class="w-1/3 max-lg:w-full flex justify-end max-lg:justify-center max-sm:hidden">
			<div class="w-1/2 h-fit max-h-[40vh] bg-neutral-800 my-16 max-lg:my-4 rounded-xl text-white p-4">
				<ul>
					<li>
						<p><span class="font-semibold">Name: </span>{overlay.data.name}</p>
					</li>
					<li>
						<p><span class="font-semibold">Date published: </span><FormattedDate date={overlay.data.pubDate}></p>
					</li>
					<li>
						<p><span class="font-semibold">Author: </span>{overlay.data.author}</p>
					</li>
					{overlay.data.description && <li>
						<p><span class="font-semibold">Description: </span>{overlay.data.description}</p>
					</li>}
				</ul>
			</div>
		</div>
		<div class="w-1/3 max-lg:w-full flex flex-col items-center">
			<div class="bg-neutral-800 w-fit h-fit mt-16 max-lg:mt-4  mb-4 rounded-md">
				<astro-skin-renderer data-id={overlay.id}>
					<canvas id="skin-preview" class="hover:cursor-move"></canvas>
				</astro-skin-renderer>
			</div>
			<a id="download" class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded transition">Download Skin</a>
		</div>
		<div class="w-1/3 max-lg:w-full">
			<div class="w-1/2 h-fit max-h-[40vh] bg-neutral-800 my-16 rounded-xl text-white p-4 max-lg:mx-auto">
				<h2 class="text-lg mb-2">Controls</h2>
				COMING SOON
			</div>
	</main>
</Layout>

<script>
	import { SkinViewer } from "skinview3d"
		class SkinRenderer extends HTMLElement {
			constructor() {
				super();
				
				const canvas = document.getElementById("skin-preview") as HTMLCanvasElement;
				if(canvas == null) return
				
				const skinViewer = new SkinViewer({
					width: 300,
					height: 500,
					canvas: canvas,
				});
	
				skinViewer.camera.rotation.x = -0.1;
				skinViewer.camera.rotation.y = 0.5;
				skinViewer.camera.rotation.z = 0.05;
				skinViewer.camera.position.x = 15;
				skinViewer.camera.position.y = 3;
				skinViewer.camera.position.z = 25;
				
				skinViewer.fov = 70;
				skinViewer.zoom = 0.7;
	
				this.loadSkin(skinViewer)
			}
	
			async loadSkin(skinViewer: SkinViewer){
				let id = this.dataset.id;
				const params = new Proxy(new URLSearchParams(window.location.search), {
					get: (searchParams, prop) => searchParams.get(prop as string),
				}) as any; //for some reason typescript says username is not a property even though it is...
				let username = params.username ?? 'cryptizism'
				let image = await overlayImages("https://mc-heads.net/skin/" + username, `../overlays/${id}.png`)
				let link = document.getElementById('download') as HTMLAnchorElement
				link.href = image
				link.download = id + "-overlay-skin.png"
				await skinViewer.loadSkin(image)
			}
		}	
	
		function overlayImages(backgroundImageUrl:string, overlayImageUrl:string):Promise<string> {
			return new Promise((resolve, reject) => {
				const canvas = document.createElement('canvas');
				canvas.style.display = 'none';
				document.body.appendChild(canvas);
	
				const backgroundImg = new Image();
				backgroundImg.crossOrigin = 'Anonymous';
				backgroundImg.src = backgroundImageUrl;
	
				const overlayImg = new Image();
				overlayImg.crossOrigin = 'Anonymous';
				overlayImg.src = overlayImageUrl;
	
				Promise.all([
					new Promise((res) => (backgroundImg.onload = res)),
					new Promise((res) => (overlayImg.onload = res)),
				]).then(() => {
					canvas.width = backgroundImg.width;
					canvas.height = backgroundImg.height;
	
					const ctx = canvas.getContext('2d');
					if(ctx == null) return;
					ctx.drawImage(backgroundImg, 0, 0);
	
					ctx.drawImage(overlayImg, 0, 0, overlayImg.width, overlayImg.height);
	
					const base64 = canvas.toDataURL('image/png');
	
					document.body.removeChild(canvas);
					resolve(base64);
				});
			});
		}
	
		customElements.define('astro-skin-renderer', SkinRenderer);
</script>
